
ext {
    androidxCoreVersion = project.hasProperty('androidxCoreVersion') ? rootProject.ext.androidxCoreVersion : '1.10.0'
    cordovaAndroidVersion =  project.hasProperty('cordovaAndroidVersion') ? rootProject.ext.cordovaAndroidVersion : '10.1.1'
}

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

buildscript {
    ext {
        kotlin_version = "1.8.20"
        agp_version = "8.1.0"
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$agp_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    namespace "com.scandit.capacitor.datacapture.parser"
    compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 33
    defaultConfig {
        minSdkVersion project.hasProperty('minSdkVersion') ? rootProject.ext.minSdkVersion : 23
        targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 33
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
}

repositories {
    google()
    mavenCentral()
}

dependencies {
    def sdk_version = "6.27.0"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(dir: 'library', include: ['*.aar'])
    implementation project(':capacitor-android')

    implementation project(':scandit-capacitor-datacapture-core')
    println("Version of the native sdk used in this build: ${safeExtGet('global_sdk_version', sdk_version)}")
    if (findProject(':scandit-datacapture-frameworks-parser') != null) {
        api project(":scandit-datacapture-frameworks-parser")
    } else {
        api "com.scandit.datacapture.frameworks:parser:${safeExtGet('global_sdk_version', sdk_version)}"
    }
    implementation "androidx.core:core-ktx:$androidxCoreVersion"
}
